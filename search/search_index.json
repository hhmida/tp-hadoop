{"config":{"lang":["en","fr"],"separator":"[\\s\\-\\.]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Introduction","text":""},{"location":"index.html#debuter_avec_lecosysteme_hadoop","title":"D\u00e9buter avec l'\u00e9cosyst\u00e8me Hadoop","text":""},{"location":"index.html#objectifs","title":"Objectifs","text":"<ul> <li>G\u00e9rer et v\u00e9rifier les services de Hadoop</li> <li>Manipuler le syst\u00e8me de fichiers HDFS</li> <li>Comprendre et cr\u00e9er des programmes MapReduce simples</li> <li>Cr\u00e9er des programmes MapReduce \u00e0 plusieurs phases</li> <li>Transformer et Interroger les donn\u00e9es avec Pig et Hive</li> <li>D\u00e9ployer un cluster Hadoop</li> </ul>"},{"location":"index.html#ressources","title":"Ressources","text":"<p>Outils</p> <ul> <li>Oracle Virtual Box V6.1 (ou VMware)</li> <li>Image de machine virtuelle  avec les outils pr\u00e9-install\u00e9s. C'est une image cr\u00e9\u00e9e par Pierre Nezric \u00e0 laquelle sont ajout\u00e9s jupyter et mrjob. Elle contient les outils suivants :<ul> <li>Hadoop 2.7.3</li> <li>Spark 2.1.1</li> <li>Pig 0.15.0</li> <li>Hive 1.2.1</li> <li>HBase 1.1.9</li> <li>Cassandra </li> <li>Elasticsearch et Kibana</li> <li>Zookeeper 3.4.6</li> </ul> </li> </ul> <p>Sources et r\u00e9f\u00e9rence</p> <ul> <li>Documentation Hadoop</li> <li>Big Data Analytics with Hadoop 3, Sridhar Alla, Packt Publishing, 2018.</li> </ul> <p></p>"},{"location":"index.html#presentation_de_hadoop","title":"Pr\u00e9sentation de Hadoop","text":""},{"location":"index.html#role","title":"R\u00f4le","text":"<p>Hadoop est un framework pour le stockage et le traitement distribu\u00e9 de grands volumes de donn\u00e9es sur des clusters d'ordinateurs \u00e0 l'aide de mod\u00e8les de programmation simples. Il permet de passer de n\u0153uds uniques \u00e0 des milliers de machines, chacune offrant un calcul et un stockage locaux. Hadoop garantit une haute disponibilit\u00e9 en d\u00e9tectant et traitant les pannes au niveau de la couche application.</p> <p>Hadoop supporte la scalabilit\u00e9 horizontale et verticale. Il est la plateforme Big Data de r\u00e9f\u00e9rence.</p>"},{"location":"index.html#historique_et_versions","title":"Historique et versions","text":"<p>Les principales nouveaut\u00e9s des versions majeures par rapport aux versions pr\u00e9c\u00e9dentes sont :</p> <p>Version 2 :</p> <ul> <li>YARN : la gestion des ressources du cluster.</li> </ul> <p>Version 3 :</p> <ul> <li>Erasure Coding : tol\u00e9rance aux fautes par bloc de parit\u00e9.</li> <li>Haute disponibilit\u00e9 am\u00e9lior\u00e9e avec plusieurs NameNode secondaires (en standby)</li> </ul> <p>Comment obtenir Hadoop ?</p> <p>Hadoop est projet Open Source avec la licence Apache V2. Mais il existe aussi des distributions commerciales offertes par des fournisseurs avec des outils suppl\u00e9mentaires pour former une plateforme de Big Data Analytics. Historiquement, les leaders sont Cloudera, Hortonworks et MapR. Mais ces derni\u00e8res ann\u00e9es, plusieurs acquisitions et fusions ont \u00e9t\u00e9 effectu\u00e9es.</p> <p>Les principales alternatives actuelles pour obtenir Hadoop sont :</p> <ol> <li>Apache Hadoop : C'est la version Open Source. Plus difficile \u00e0 g\u00e9rer pour composer un \u00e9cosyst\u00e8me complet malgr\u00e9 que la majorit\u00e9 des composants sont Open Source aussi (Spark, Flink, Hive, Hbase, ...).</li> <li>Distribution Hadoop : o\u00f9 une pile de composants sont pr\u00e9-install\u00e9 avec des outils de gestion et d'administration int\u00e9gr\u00e9s (Ambari, Clouder Manager, ...). Parmi ces distributions on trouve :<ol> <li>Cloudera : apr\u00e8s la fusion, en 2018, avec son concurrent direct Hortonworks il a h\u00e9rit\u00e9 de ces produits HDP (Hortonworks Data Platform)  et HDF (Hortonworks Data Flow) sous forme de machines virtuelles (VMware, VirtualBox et Docker) et CDP (Cloudera Data Platform) en Cloud.</li> <li>Hewlett Packard Enterprise : qui h\u00e9rite de la plateforme MapR Data Platform apr\u00e8s son acquisition en 2018. Elle est rebaptis\u00e9e sous le nom HPE Ezmeral Data Fabric V6.2 (voir comment l'installer ici). Elle est compatible avec Ubuntu, RedHat/CentOS et SUSE. Un version l\u00e9g\u00e8re pour le d\u00e9veloppement et test est aussi offerte sous la forme d'un container Docker (Development Environment for HPE Ezmeral Data Fabric).</li> <li>IBM Open Platform: IOP ou IBM BigInsights est la distribution d'IBM disponible en version de production ou de test (Quick Start Edition).</li> </ol> </li> <li>\u00c9quipement d\u00e9di\u00e9 : Mat\u00e9riel optimis\u00e9 pour Hadoop comme : Dell, EMC, Teradata Appliance for Hadoop, HP, Oracle, ...</li> <li>Hadoop sur le Cloud: comme PaaS (Platform as a Service) tel que Amazon EMR, Microsoft HDInsight, Google Cloud Platform, Qubole, IBM BigInsights, ...</li> </ol> Cloudera Data Platform <p>Pour tester une liste plus \u00e9tendue d'outils de l'\u00e9cosyst\u00e8me Hadoop, je vous recommance la distribution Cloudera Data Platform 3.0 ou 2.6. Il faut lui pr\u00e9voir plus de ressources RAM et disque.</p>"},{"location":"index.html#composants_du_noyau_hadoop","title":"Composants  du noyau Hadoop","text":"<p>3 composants principaux sont au c\u0153ur de Hadoop :</p> <p></p>"},{"location":"index.html#hdfs_hadoop_distributed_file_system","title":"HDFS (Hadoop Distributed File System)","text":"<p>C'est le syst\u00e8me de fichier primaire de Hadoop. Il permet le stockage de larges volumes de donn\u00e9es sur des unit\u00e9s de stockage assez basique et abordable. Les donn\u00e9es sont partitionn\u00e9es et r\u00e9pliqu\u00e9es pour garantir la fiabilit\u00e9 et un acc\u00e8s parall\u00e8le. Il op\u00e8re selon le mod\u00e8le ma\u00eetre-esclave form\u00e9 respectivement par les n\u0153uds NameNode et DataNode.</p>"},{"location":"index.html#mapreduce","title":"MapReduce","text":"<p>C'est la couche de traitement dans Hadoop. Elle traite des volumes importants de donn\u00e9es structur\u00e9es et non structur\u00e9es stock\u00e9es dans HDFS. MapReduce traite \u00e9galement une \u00e9norme quantit\u00e9 de donn\u00e9es en parall\u00e8le. Pour ce faire, il divise le travail en un ensemble de t\u00e2ches ind\u00e9pendantes selon le principe divisier et conqu\u00e9rir. MapReduce fonctionne en divisant le traitement en phases: Map et Reduce.</p>"},{"location":"index.html#yarn_yet_another_resource_negotiator","title":"YARN (Yet Another Resource Negotiator)","text":"<p>Il s'occupe de la gestion et la surveillance des travaux. YARN permet plusieurs moteurs de traitement de donn\u00e9es tels que le streaming en temps r\u00e9el, le traitement par lots, etc. Le Resource Manager est le composant au niveau de la machine ma\u00eetre. Il g\u00e8re les ressources et planifie les applications s'ex\u00e9cutant sur YARN. Il a deux composants: Scheduler &amp; Application Manager. Tandis que le Node Manager, au niveau du n\u0153ud, communique en permanence avec Resource Manager et assure l'ex\u00e9cution des t\u00e2ches.</p>"},{"location":"index.html#preparation_de_la_machine_virtuelle","title":"Pr\u00e9paration de la machine virtuelle","text":"<ul> <li>En utilisant VirtualBox et \u00e0 partir du menu Fichier -&gt; Importer un appareil virtuel, s\u00e9lectionner le fichier <code>BDTools.ova</code> fourni et choisissez l'emplacement de destination.</li> <li>Une fois l'importation finie, v\u00e9rifier les param\u00e8tres de la machine virtuelle pour les ajuster \u00e0 la configuration de votre machine. Il est recommand\u00e9 d'utiliser 8G de RAM en gardant au moins 2G pour la machine h\u00f4te.</li> <li>D\u00e9marrer la machine virtuelle et se connecter avec l'utilisateur <code>uti</code>. Le mot de passe <code>=uti=</code>. Par d\u00e9faut, les services actifs sont HDFS, YARN et HBase. La commande suivante permet de s\u00e9lectionner les services et activer/d\u00e9sactiver pour optimiser la gestion de la m\u00e9moire : <pre><code>sudo SelectService hadoop | spark | cassandra | elasticsearch\n</code></pre> Lancer le navigateur et aller sur la page http://localhost o\u00f9 l'\u00e9tat des services est affich\u00e9 :</li> </ul>"},{"location":"cluster.html","title":"Hadoop en mode cluster","text":""},{"location":"cluster.html#hadoop_en_mode_cluster","title":"Hadoop en mode cluster","text":""},{"location":"cluster.html#virtualisation_avec_docker","title":"Virtualisation avec Docker","text":"<p>Utiliser plusieurs machines virtuelles requiert plus des ressources. Pour cela, nous allons utiliser des containers Docker.</p> <p>Le sc\u00e9nario consiste \u00e0 d\u00e9ployer 4 n\u0153uds hadoop \u00e0 partir d'une image Docker fournie ici. Cette image est similaire \u00e0 celle utilis\u00e9e avec VirtualBox : elle contient la verion 3.2.1 de hadoop, mrjob, python3 et jupyter.</p>"},{"location":"cluster.html#deploiement_avec_docker","title":"D\u00e9ploiement avec Docker","text":"<p> Charger l'image docker</p> <p>Soit \u00e0 partir du fichier fourni :</p> <pre><code>docker load &lt; hadoop-3.2.1-docker.tar.gz\n</code></pre> <p>Ou \u00e0 partir du Docker Hub :</p> <pre><code>docker pull hhmida/hadoop:3.2.1\n</code></pre> <p> Cr\u00e9er un r\u00e9seau virtuel :</p> <pre><code>docker network create --driver bridge hadoopnet\n</code></pre> <p> Ex\u00e9cuter 4 instance de l'image avec les noms nodemaster node2, node3, et node4</p> <pre><code>docker run -d --network hadoopnet --name nodemaster -it -h nodemaster -p 8088:8088 -p 9870:9870 -p 9864:9864 -p 19888:19888 -p 8042:8042 -p 8888:8888 hadoop:3.2.1\ndocker run -dP --network hadoopnet --name node2 -it -h node2 hadoop:3.2.1\ndocker run -dP --network hadoopnet --name node3 -it -h node3 hadoop:3.2.1\ndocker run -dP --network hadoopnet --name node4 -it -h node4 hadoop:3.2.1\n</code></pre> Image t\u00e9l\u00e9charg\u00e9e depuis Docker Hub <p>Si vous avez t\u00e9l\u00e9charger l'image avec la commande <code>docker pull</code> alors remplacer <code>hadoop:3.2.1</code> par <code>hhmida/hadoop:3.2.1</code>.</p> <p> Formater le nodemaster :</p> <pre><code>docker exec -u hadoop -it nodemaster hadoop/bin/hdfs namenode -format\n</code></pre>"},{"location":"cluster.html#demarrage_du_cluster","title":"D\u00e9marrage du cluster","text":"<p> D\u00e9marrer les containers</p> <pre><code>docker start nodemaster node2 node3 node4\n</code></pre> <p> D\u00e9marrer les services hadoop</p> <p>Ex\u00e9cuter ces 2 commandes pour d\u00e9marrer les services \u00e0 partir du nodemaster :</p> <pre><code>docker exec -u hadoop -d nodemaster /home/hadoop/hadoop/sbin/start-dfs.sh\ndocker exec -u hadoop -d nodemaster /home/hadoop/hadoop/sbin/start-yarn.sh\n</code></pre> <p> cr\u00e9er le dossier racine sur HDFS</p> <pre><code>docker exec -u hadoop -it nodemaster /home/hadoop/hadoop/bin/hadoop fs -mkdir -p .\n</code></pre> <p> D\u00e9marrer jupyter</p> <pre><code>docker exec -u hadoop -d nodemaster jupyter notebook --ip=0.0.0.0 --port=8888 --notebook-dir='/home/hadoop' --NotebookApp.token='' --NotebookApp.password=''\n</code></pre>"},{"location":"cluster.html#arret_des_nuds","title":"Arr\u00eat des n\u0153uds","text":"<pre><code>docker stop nodemaster node2 node3 node4\n</code></pre> Red\u00e9marrage du cluster <p>Pour red\u00e9marrer le cluster ex\u00e9cuter les \u00e9tapes de la section D\u00e9marrage du cluster.</p>"},{"location":"cluster.html#verification_de_letat_du_cluster","title":"V\u00e9rification de l'\u00e9tat du cluster","text":"<p>Avec la commande <code>jps</code>:</p> <p>Au niveau du nodemaster</p> <p></p> <p>Au niveau de node2 et node3</p> <p></p> <p>Acc\u00e9der aux URLs suivantes pour v\u00e9rifier l'\u00e9tat et la configuration du cluster</p> <ul> <li>Cluster Hadoop : http://localhost:8088</li> <li>HDFS :  http://localhost:9870</li> <li>Jupyter notebook :  http://localhost:8888</li> </ul> <p>L'interface du Resource Manager montre les n&amp;339;uds :</p> <p></p> <p>L'interface HDFS montre les n\u0153uds DataNodes actifs :</p> <p></p> <p>Remarquer la colonne Last contact qui refl\u00e8te le dernier heartbeaz re\u00e7u (inf\u00e9rieur au timeout par d\u00e9faut : 3 Secondes).</p> <p>Maintenant, arr\u00eater le n\u0153ud node3 :</p> <pre><code>docker stop node4\n</code></pre> <p></p> <p>Apr\u00e8s 1000 Secondes le n\u0153ud est consid\u00e9r\u00e9 comme indisponible :</p> <p></p>"},{"location":"cluster.html#virtualisation_avec_machines_virtuelles","title":"Virtualisation avec machines virtuelles","text":"<p>Cr\u00e9er un cluster avec la machine virtuelle est plus simple mais n\u00e9cessite plus de ressources. En effet, dans notre exemple et pour cr\u00e9er un cluster compos\u00e9 d'un ma\u00eetre et 2 workers, vous devez disposer de 8GO de RAM au minimum dont 6GO pour les machines virtuelles.</p>"},{"location":"cluster.html#modifications_sur_la_machine_virtuelle_originale","title":"Modifications sur la machine virtuelle originale","text":"<p> Changer le nom de la machine dans le fichier <code>/etc/hostname</code> en <code>nodemaster</code></p> <pre><code>sudo echo \"nodemaster\" &gt; /etc/hostname\n</code></pre> <p> Modifier le fichier <code>/etc/hosts</code> :</p> <pre><code>sudo nano /etc/hosts\n</code></pre> <p>Puis \u00e9crire les lignes suivantes et enregistrer :</p> <pre><code>192.168.100.10 nodemaster\n192.168.100.20 node2\n192.168.100.30 mode3\n</code></pre> <p> Modifier les fichiers de configuration de Hadoop</p> <p>Modifier le fichier <code>/ur/local/hadoop/etc/hadoop/core-site.xml</code> ainsi :</p> <pre><code>&lt;property&gt;\n&lt;name&gt;fs.defaultFS&lt;/name&gt;\n&lt;value&gt;hdfs://nodemaster:9000&lt;/value&gt;\n&lt;/property&gt;\n</code></pre> <p>Changer la replication dans <code>/usr/local/hadoop/etc/hadoop/hdfs-site.xml</code></p> <pre><code>&lt;property&gt;\n&lt;name&gt;dfs.replication&lt;/name&gt;\n&lt;value&gt;3&lt;/value&gt;\n&lt;/property&gt;\n</code></pre> <p>Ajouter cette propri\u00e9t\u00e9 dans <code>/usr/local/hadoop/etc/hadoop/yarn-site.xml</code></p> <pre><code>&lt;property&gt;\n&lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;\n&lt;value&gt;nodemaster&lt;/value&gt;\n&lt;/property&gt;\n</code></pre> <p>Le fichier <code>/usr/local/hadoop/etc/hadoop/workers</code> contient les noms des machines du cluster, il sera utilis\u00e9 pour d\u00e9marrer les services depuis le n\u0153ud ma\u00eetre.</p> <pre><code>nodemaster\nnode2\nnode3\n</code></pre> Workers <p>nodemaster dans cette configuration est consid\u00e9r\u00e9 comme namenode et datanode \u00e0 la fois.</p>"},{"location":"cluster.html#clonage_de_la_machine_virtuelle","title":"Clonage de la machine virtuelle","text":"<p> Cr\u00e9er 2 clones de la machine virtuelle originale qui vont \u00eatre respectivement node2 et node3.</p> <p> </p> <p> Chager leurs noms dans <code>/etc/hostname</code> respectivement en node2 et node3</p> <p>Sur la machine node2 :</p> <pre><code>sudo echo \"node2\" &gt; /etc/hostname\n</code></pre> <p>Sur la machine node3 :</p> <pre><code>sudo echo \"node3\" &gt; /etc/hostname\n</code></pre> <p> Changer les adresses IP en <code>192.168.100.20</code> et <code>192.168.100.30</code> en suivant les \u00e9tapes suivantes (refaire les m\u00eames \u00e9tapes pour node3) :</p> <pre><code>sudo nano /etc/netplan/00-installer-config.yaml\n</code></pre> <p></p> <p>Puis appliquer les modifications :</p> <pre><code>sudo netplan apply\n</code></pre> <p> Red\u00e9marrer les 3 machines et d\u00e9marrer les services depuis le nodemaster :</p> <pre><code>start-dfs.sh\nstart-yarn.sh\n</code></pre> <p>V\u00e9rifier avec <code>jps</code> ou les URLs http://192.168.100.10:9870 et http://192.168.100.10:8088</p> <p>Test de l'arr\u00eat d'un n\u0153ud : Voir la section pour l'exemple r\u00e9alis\u00e9 avec les containers Docker (ici).</p>"},{"location":"cluster.html#test_de_map_reduce_sur_le_cluster","title":"Test de Map Reduce sur le cluster","text":"<p>Refaire l'exemple wordcout (voir ici):</p> <p>Mettre le fichier <code>shakespeare.txt</code> sur HDFS :</p> <pre><code>hadoop fs -put shakespeare.txt\n</code></pre> <p>Lancer Jupyter </p> <pre><code>jupyter notebook --ip=0.0.0.0 --port=8888 --notebook-dir='/home/hadoop' --NotebookApp.token='' --NotebookApp.password=''\n</code></pre> <p>Se connecter \u00e0 http://192.168.100.10:8888, cr\u00e9er le notebook et ajouter le code de l'exemple wordcount :</p> <p>Pendant l'ex\u00e9cution, vous pouvez visualiser l'\u00e9tat des ressources allou\u00e9es en cliquant sur <code>Scheduler</code> sur http://192.168.100.10:8088</p> <p>Apr\u00e8s l'ex\u00e9cution r\u00e9ussie sur le cluster, cliquer sur <code>Applications</code> pour v\u00e9rifier l'\u00e9tat de l'application.</p> <p>Pour afficher le d\u00e9tail des t\u00e2ches, il est possible de voir le Job History. D\u00e9marrer le serveur job History et acc\u00e9der \u00e0 son interface web.</p> <p>D\u00e9marrer le serveur</p> <pre><code>mapred jobhistoryserver start\n</code></pre> <p>Acc\u00e8s \u00e0 l'interface web : http://192.168.100.10:19888</p> <p></p> <p>En cliquant sur le Job ID, le nombre de t\u00e2ches Map et Reduce est affich\u00e9 (dans ce cas 2 Maps et 1 Reduce) </p> <p>Et puis chacune des t\u00e2ches :</p> <p>La premi\u00e8re t\u00e2che Map </p> <p>La seconde t\u00e2che Map </p> <p>La t\u00e2che Reduce </p>"},{"location":"hdfs.html","title":"Manipulation de HDFS","text":""},{"location":"hdfs.html#manipulation_de_hdfs","title":"Manipulation de HDFS","text":""},{"location":"hdfs.html#service_hdfs","title":"Service HDFS","text":""},{"location":"hdfs.html#demarrerarreter","title":"D\u00e9marrer/Arr\u00eater","text":"Service HDFS <p>Pour g\u00e9rer les services, il est recommand\u00e9 d'utiliser le script SelectService. Mais pour les g\u00e9rer individuellement il est possible d'utiliser les commandes suivantes :</p> D\u00e9marrageArr\u00eat <pre><code>sudo service hadoop-hdfs-namenode start\nsudo service hadoop-hdfs-datanode start\n</code></pre> <pre><code>sudo service hadoop-hdfs-namenode stop\nsudo service hadoop-hdfs-datanode stop\n</code></pre> <p>La commande <code>sudo jps</code> permet de v\u00e9rifier que deux processus sont lanc\u00e9s : NameNode et DataNode. Avec la version 3, un processus SecondaryNameNode est aussi lanc\u00e9.</p> <p></p> <p>HDFS est maintenant accessible via l'interface web : http://localhost:50070</p> <p></p> <p>Cette interface permet d'afficher l'\u00e9tat de HDFS et ses diffrents datanodes. Il est possible d'explorer le contenu du syst\u00e8me de fichiers \u00e0 partir du menu <code>Utilities</code> puis <code>Browse the file system</code>.</p> <p></p>"},{"location":"hdfs.html#formatage","title":"Formatage","text":"<pre><code>hdfs namenode -format\n</code></pre> Attention <p>L'op\u00e9ration de formatage supprime tous les fichiers. Elle est effectu\u00e9e lors de l'installation de Hadoop ou pour r\u00e9initialiser HDFS.</p>"},{"location":"hdfs.html#commandes_hdfs","title":"Commandes HDFS","text":"<p>Le syst\u00e8me HDFS est manipul\u00e9 \u00e0 travers des commandes inspir\u00e9es du syst\u00e8me Linux. La forme g\u00e9n\u00e9rale de ces commandes est comme suit :</p> Format des commandes HDFS <pre><code>hadoop fs -nomCommande -options param1 ...\n</code></pre> <p>Ou encore :</p> <pre><code>hdfs dfs -nomCommande -options param1 ...\n</code></pre>"},{"location":"hdfs.html#aide_sur_une_commande","title":"Aide sur une commande","text":"Aide sur les commandes HDFS <p>Afficher les commandes disponibles :</p> <p><pre><code>hadoop fs -help\n</code></pre> <pre><code>Usage: hadoop fs [generic options]\n    [-appendToFile &lt;localsrc&gt; ... &lt;dst&gt;]\n    [-cat [-ignoreCrc] &lt;src&gt; ...]\n    [-checksum &lt;src&gt; ...]\n    [-chgrp [-R] GROUP PATH...]\n    [-chmod [-R] &lt;MODE[,MODE]... | OCTALMODE&gt; PATH...]\n    [-chown [-R] [OWNER][:[GROUP]] PATH...]\n    [-copyFromLocal [-f] [-p] [-l] [-d] [-t &lt;thread count&gt;] &lt;localsrc&gt; ... &lt;dst&gt;]\n    [-copyToLocal [-f] [-p] [-ignoreCrc] [-crc] &lt;src&gt; ... &lt;localdst&gt;]\n    [-count [-q] [-h] [-v] [-t [&lt;storage type&gt;]] [-u] [-x] [-e] &lt;path&gt; ...]\n    [-cp [-f] [-p | -p[topax]] [-d] &lt;src&gt; ... &lt;dst&gt;]\n    [-createSnapshot &lt;snapshotDir&gt; [&lt;snapshotName&gt;]]\n    [-deleteSnapshot &lt;snapshotDir&gt; &lt;snapshotName&gt;]\n    [-df [-h] [&lt;path&gt; ...]]\n    [-du [-s] [-h] [-v] [-x] &lt;path&gt; ...]\n    [-expunge [-immediate]]\n    [-find &lt;path&gt; ... &lt;expression&gt; ...]\n    [-get [-f] [-p] [-ignoreCrc] [-crc] &lt;src&gt; ... &lt;localdst&gt;]\n    [-getfacl [-R] &lt;path&gt;]\n    [-getfattr [-R] {-n name | -d} [-e en] &lt;path&gt;]\n    [-getmerge [-nl] [-skip-empty-file] &lt;src&gt; &lt;localdst&gt;]\n    [-head &lt;file&gt;]\n    [-help [cmd ...]]\n    [-ls [-C] [-d] [-h] [-q] [-R] [-t] [-S] [-r] [-u] [-e] [&lt;path&gt; ...]]\n    [-mkdir [-p] &lt;path&gt; ...]\n    [-moveFromLocal &lt;localsrc&gt; ... &lt;dst&gt;]\n    [-moveToLocal &lt;src&gt; &lt;localdst&gt;]\n    [-mv &lt;src&gt; ... &lt;dst&gt;]\n    [-put [-f] [-p] [-l] [-d] &lt;localsrc&gt; ... &lt;dst&gt;]\n    [-renameSnapshot &lt;snapshotDir&gt; &lt;oldName&gt; &lt;newName&gt;]\n    [-rm [-f] [-r|-R] [-skipTrash] [-safely] &lt;src&gt; ...]\n    [-rmdir [--ignore-fail-on-non-empty] &lt;dir&gt; ...]\n    [-setfacl [-R] [{-b|-k} {-m|-x &lt;acl_spec&gt;} &lt;path&gt;]|[--set &lt;acl_spec&gt; &lt;path&gt;]]\n    [-setfattr {-n name [-v value] | -x name} &lt;path&gt;]\n    [-setrep [-R] [-w] &lt;rep&gt; &lt;path&gt; ...]\n    [-stat [format] &lt;path&gt; ...]\n    [-tail [-f] [-s &lt;sleep interval&gt;] &lt;file&gt;]\n    [-test -[defswrz] &lt;path&gt;]\n    [-text [-ignoreCrc] &lt;src&gt; ...]\n    [-touch [-a] [-m] [-t TIMESTAMP ] [-c] &lt;path&gt; ...]\n    [-touchz &lt;path&gt; ...]\n    [-truncate [-w] &lt;length&gt; &lt;path&gt; ...]\n    [-usage [cmd ...]]\n</code></pre></p> Aide sur une commande HDFS <p>Afficher l'aide sur une commande particuli\u00e8re (ici la commande ls) :</p> <p><pre><code>hadoop fs -help ls\n</code></pre> <pre><code>-ls [-C] [-d] [-h] [-q] [-R] [-t] [-S] [-r] [-u] [-e] [&lt;path&gt; ...] :\nList the contents that match the specified file pattern. If path is not specified, the contents of /user/&lt;currentUser&gt; will be listed. \nFor a directory a list of its direct children is returned (unless -d option is specified).\n\nDirectory entries are of the form:\npermissions - userId groupId sizeOfDirectory(in bytes) modificationDate(yyyy-MM-dd HH:mm) directoryName\n\nand file entries are of the form:\npermissions numberOfReplicas userId groupId sizeOfFile(in bytes) modificationDate(yyyy-MM-dd HH:mm) fileName\n\n-C  Display the paths of files and directories only.\n-d  Directories are listed as plain files.\n-h  Formats the sizes of files in a human-readable fashion  rather than a number of bytes.\n-q  Print ? instead of non-printable characters.\n-R  Recursively list the contents of directories.\n-t  Sort files by modification time (most recent first).\n-S  Sort files by size.\n-r  Reverse the order of the sort.\n-u  Use time of last access instead of modification for display and sorting.\n-e  Display the erasure coding policy of files and directories.\n</code></pre></p>"},{"location":"hdfs.html#exemples","title":"Exemples :","text":""},{"location":"hdfs.html#affichage_du_contenu_dun_dossier","title":"Affichage du contenu d'un dossier","text":"<pre><code>hadoop fs -ls\n</code></pre> Dossier par d\u00e9faut <p>Pour les chemins relatifs HDFS utilise <code>/user/nom_utilisateur</code> comme racine ou <code>nom_utilisateur</code> est l'utilisateur connect\u00e9. Si le dossier <code>/user/&lt;nom utilisateur&gt;</code> n'est pas cr\u00e9\u00e9, cette commande provoque une erreur. Dans notre cas, c'est le dossier <code>/user/uti</code> qui doit \u00eatre cr\u00e9\u00e9. <pre><code>hadoop fs -mkdir -p .\n</code></pre> ou <pre><code>hadoop fs -mkdir -p /user/uti\n</code></pre></p>"},{"location":"hdfs.html#creer_des_fichiers","title":"Cr\u00e9er des fichiers","text":"Cr\u00e9er un fichier test.txt <pre><code>hadoop fs -touchz test.txt\n</code></pre>"},{"location":"hdfs.html#upload_de_fichiers_ou_dossiers","title":"Upload de fichiers ou dossiers","text":"Upload de fichier <p>Le fichier exemple.txt doit \u00eatre dans le dossier en cours.</p> <p><pre><code>hadoop fs -put exemple.txt\n</code></pre> ou</p> <pre><code>hadoop fs -copyFromLocal exemple.txt\n</code></pre> <p>Pour choisir une taille de bloc diff\u00e9rente de celle par d\u00e9faut :</p> <pre><code>hadoop fs -D dfs.blocksize=268435456 -put exemple.txt exemple_256M.txt\n</code></pre>"},{"location":"hdfs.html#supprimer_des_fichiers","title":"Supprimer des fichiers","text":"Supprimer le fichier test.txt <pre><code>hadoop fs -rm test.txt\n</code></pre>"},{"location":"hdfs.html#creer_des_dossier","title":"Cr\u00e9er des dossier","text":"Cr\u00e9er un dossier data/csv <pre><code>hadoop fs -mkdir -p data/csv\n</code></pre>"},{"location":"hdfs.html#supprimer_des_dossiers","title":"Supprimer des dossiers","text":"Supprimer le dossier csv <pre><code>hadoop fs -rmdir csv\n</code></pre>"},{"location":"hdfs.html#copierdeplacer_des_fichiers_ou_des_dossiers","title":"Copier/d\u00e9placer des fichiers ou des dossiers","text":"Copier le fichier test.txt <pre><code>hadoop fs -cp test.txt data/copie.txt\n</code></pre> D\u00e9placer le fichier copie.txt <pre><code>hadoop fs -mv data/copie.txt copie2.txt\n</code></pre>"},{"location":"hdfs.html#autres_commandes","title":"Autres Commandes","text":""},{"location":"hdfs.html#ajouter_dans_un_fichier","title":"Ajouter dans un fichier","text":"<p>\u00e0 partir du STDIN <pre><code>hadoop fs -appendToFile - copie2.txt </code></pre> \u00e0 partir d'un fichier</p> <pre><code>echo \"nouvelle ligne\" &gt;new.txt\nhadoop fs -appendToFile new.txt copie2.txt\n</code></pre>"},{"location":"hdfs.html#changer_les_permissions","title":"Changer les permissions","text":"<pre><code>hadoop fs -chmod 644 copie2.txt\n</code></pre>"},{"location":"hdfs.html#changer_le_proprietaire","title":"Changer le propri\u00e9taire","text":"<pre><code>hadoop fs -chown root:root copie2.txt\n</code></pre>"},{"location":"hdfs.html#recuperer_le_contenu_dun_dossier_dans_un_fichier","title":"R\u00e9cup\u00e9rer le contenu d'un dossier dans un fichier","text":"<pre><code>hadoop fs -getmerge -nl data resultat.txt\n</code></pre>"},{"location":"hdfs.html#afficher_des_statistiques","title":"Afficher des statistiques","text":"<pre><code>hadoop fs -stat \"type:%F perm:%a %u:%g size:%b mtime:%y atime:%x name:%n block:%o replication:%r\" exemple.txt\n</code></pre>"},{"location":"hdfs.html#changer_le_facteur_de_replication","title":"Changer le facteur de replication","text":"<pre><code>hadoop fs -setrep 5 exemple.txt\n</code></pre>"},{"location":"hdfs.html#administration","title":"Administration","text":"<pre><code>    hdfs getconf -namenodes\n    hdfs getconf -secondaryNameNodes\n    hdfs getconf -confKey [key]\n\nhdfs dfsadmin [-report [-live] [-dead] [-decommissioning] [-enteringmaintenance] [-inmaintenance] [-slownodes]]\nhdfs dfsadmin [-safemode enter | leave | get | wait | forceExit]\nhdfs dfsadmin [-printTopology]\nhdfs dfsadmin [-listOpenFiles [-blockingDecommission] [-path &lt;path&gt;]]\n</code></pre>"},{"location":"hdfs.html#exercices","title":"Exercices","text":""},{"location":"hdfs.html#exercice_1","title":"Exercice 1","text":"<ul> <li>Sur HDFS, cr\u00e9er l'arborescence tunisie/petrole.</li> <li>Chercher et t\u00e9l\u00e9charger, sur http://data.industrie.gov.tn, les donn\u00e9es sur la production p\u00e9troli\u00e8re mensuelle par champ dans le format CSV.</li> <li>Placer le fichier dans le dossier petrole cr\u00e9\u00e9 dans la premi\u00e8re \u00e9tape.</li> <li>\u00c0 partir de l'interface web :<ul> <li>Chercher la taille du bloc par d\u00e9faut.</li> <li>Copier sur HDFS un fichier plus grand que la taille du bloc et v\u00e9rifier le nombre de blocs de ce fichier.</li> </ul> </li> </ul>"},{"location":"hdfs.html#exercice_2","title":"Exercice 2","text":"<ol> <li>Afficher les fichiers des sous-dossiers, avec une taille arrondie en Ko, Mo ou Go.</li> <li>Cr\u00e9er un dossier dans le r\u00e9pertoire racine du HDFS.</li> <li>Cr\u00e9er un fichier appel\u00e9 hello-hadoop.txt dans le compte Linux et contenant la phrase \u00ab Hello Hadoop \u00bb.</li> <li>Copier ce fichier sur HDFS.</li> <li>V\u00e9rifier le r\u00e9sultat.</li> <li>Afficher le contenu du fichier.</li> <li>Afficher le dernier Ko du fichier.</li> <li>Supprimer ce fichier de HDFS.</li> <li>Remettre \u00e0 nouveau ce fichier et v\u00e9rifier le r\u00e9sultat.</li> <li>Transf\u00e9rer le fichier hello-hadoop de HDFS vers le compte Linux en lui changeant son nom.</li> <li>Positionner le facteur de r\u00e9plication \u00e0 2 pour le fichier hello-hadoop.txt. </li> <li>V\u00e9rifier avec la commande stat.</li> <li>Changer les permissions sur le fichier hello-hadoop.txt \u00e0 777.</li> <li>Ajouter du texte \"HDFS est un syst\u00e8me de fichiers distribu\u00e9.\" au fichier hello-hadoop.txt sur HDFS.</li> </ol>"},{"location":"hive.html","title":"Hive","text":""},{"location":"hive.html#hive","title":"Hive","text":""},{"location":"hive.html#premier_exemple_wordcount","title":"Premier exemple : Wordcount","text":"<p>Nous reprenons l'exemple de comptage de mots utilis\u00e9 dans l'atelier MapReduce pour le r\u00e9soudre avec Hive.</p> wordcount en HiveQL<pre><code>CREATE EXTERNAL TABLE lines (line STRING); -- (1) \nLOAD DATA INPATH '/user/uti/shakespeare.txt' OVERWRITE INTO TABLE lines;\nCREATE TABLE words AS SELECT explode(split(line, ' ')) AS word FROM lines;\nCREATE TABLE word_counts AS SELECT word, count(1) AS nb FROM words\nGROUP BY word\nORDER BY nb DESC;\n</code></pre> <ol> <li> EXTERNAL permet d'emp\u00eacher de supprimer le fichier <code>shakespeare.txt</code> original apr\u00e8s son chargement avec Hive.</li> </ol> <p>Suivre les \u00e9tapes suivantes pour ex\u00e9cuter le code HiveQL :</p> <ol> <li>Lancer la machine virtuelle et acc\u00e9der \u00e0 Shell Hive (Beehive) \u00e0 partir du terminal <pre><code>hive\n</code></pre></li> <li>Vous aurez alors l'invite hive :     <pre><code>hive&gt;\n</code></pre></li> <li>Maintenant taper les commandes du code fourni.</li> </ol> Services requis pour Hive <p>Le shell Hive a besoin des services suivants :</p> <ol> <li>MySQL </li> <li>hive-metastore</li> <li>hive-server2</li> </ol> <p>Utiliser la commande <code>service nom_service start</code> pour les d\u00e9marrer en cas de besoin.</p> <p>Les lignes du code permettent respectivement de :</p> <p> Cr\u00e9er une table externe <code>lines</code>avec une colonne unique <code>line</code>.</p> <p> Charger le contenu du fichier <code>shakespeare.txt</code> \u00e0 partir de HDFS dans la table pr\u00e9c\u00e9dente. V\u00e9rifier, apr\u00e8s cette commande, la cr\u00e9ation du fichier <code>/user/hive/warehouse/lines/shakespeare.txt</code>.</p> <p> Cr\u00e9er une deuxi\u00e8me table <code>words</code> pour stocker le r\u00e9sultat d'une requ\u00eate pour d\u00e9composer chaque ligne (line) du texte dans la table lines en mot avec les fonctions <code>explode</code>et <code>split</code>.</p> <p> Cr\u00e9er une table <code>word_counts</code> structur\u00e9e en 2 colonnes : word pour le mot et nb pour le nombre d'occurences obtenu par le r\u00e9sultat de la fonction count \u00e0 partir de la table <code>words</code>.</p> <p> Grouper par mot.</p> <p> Trier par nombre d'occurences d\u00e9croissant</p> <p>V\u00e9rifier la cr\u00e9ation de Jobs MapReduce pour les diff\u00e9rentes requ\u00eates SELECT sur http://localhost:8088</p> <p>Un dossier <code>word_counts</code> est cr\u00e9\u00e9 dans <code>/user/hive/warehouse</code> o\u00f9 des fichiers (1 dans note cas 000000_0) contiennent les nombres d'occurences associ\u00e9s aux mots du fichier.</p> <p>Afficher le r\u00e9sultat :</p> <pre><code>hadoop fs -cat /user/hive/warehouse/word_counts/000000_0 | more\n</code></pre>"},{"location":"hive.html#hiveql","title":"HiveQL","text":"Pr\u00e9parer les donn\u00e9es <p>Dans cette section, nous allons utiliser les m\u00eames donn\u00e9es de la section Pig. Si les fichiers csv ne sont pas d\u00e9j\u00e0 t\u00e9l\u00e9charg\u00e9s alors proc\u00e9der aux \u00e9tapes suivantes :</p> <ol> <li>Cr\u00e9er un dossier demo : <code>mkdir ~/demo</code></li> <li>T\u00e9l\u00e9charger les fichiers csv dans /home/uti/demo :<ul> <li>employee.csv </li> <li>department.csv </li> <li>salary.csv </li> </ul> </li> <li>Envoyer les donn\u00e9es sur HDFS <pre><code>hadoop fs -put /home/uti/demo\n</code></pre></li> </ol>"},{"location":"hive.html#ldd","title":"LDD","text":"<p> Cr\u00e9er une base de donn\u00e9es <code>demo</code></p> <pre><code>CREATE DATABASE demo;\n</code></pre> <p> S\u00e9lectionner une base de donn\u00e9es</p> <pre><code>USE demo;\n-- La base de donn\u00e9es par d\u00e9faut est DEFAULT\n</code></pre> <p> Cr\u00e9er les tables</p> <pre><code>create table employee\n(id int,\nfname string,\nlname string,\ndepartment_id int\n)\nROW FORMAT DELIMITED FIELDS TERMINATED BY ',';\n\n\ncreate table department\n(id int,\ndept_name string\n)\nROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.OpenCSVSerde'\nWITH SERDEPROPERTIES (\n\"separatorChar\" = \",\",\n\"quoteChar\"     = \"\\\"\"\n)  ;\n\ncreate external table salary\n(\nsalary_id int,\nemployee_id int,\npayment double,\npayment_date date\n)\nROW FORMAT DELIMITED FIELDS TERMINATED BY ','\nlocation '/user/uti/salary';\n</code></pre> Contraintes d'int\u00e9grit\u00e9 <p>Les contraintes primary key et foreign key ne sont support\u00e9es qu'\u00e0 partir de la version 2. </p> <p>Les contraintes unique, not null et check sont ajout\u00e9es depuis la version3.</p> <p> Ajouter une colonne \u00e0 une table</p> <pre><code>CREATE TABLE test(id int);\nALTER TABLE test ADD COLUMNS (name string, dob date);\n</code></pre> <p> Supprimer une table</p> <pre><code>DROP TABLE test;\n</code></pre> <p> SHOW/DESCRIBE</p> <p>Afficher les objets disponibles </p> <pre><code>Show Databases;\nShow Tables;\nShow Partitions &lt;table&gt;;\nShow TblProperties &lt;table&gt;;\nShow Create Table &lt;table&gt;;\nShow Indexes on &lt;table&gt;;\nShow Columns in &lt;table&gt;;\nShow Functions;\nShow transactions;\n</code></pre> <p>Afficher la strucuture ou les propri\u00e9t\u00e9s d'un objet</p> <pre><code>Describe database &lt;db_name&gt;;\nDescribe &lt;table&gt;;\nDescribe &lt;table.column&gt;;\n</code></pre>"},{"location":"hive.html#lmd","title":"LMD","text":"<p> Charger des donn\u00e9es \u00e0 partir des fichiers CSV depuis HDFS</p> <pre><code>LOAD DATA INPATH '/user/uti/demo/employee.csv' INTO TABlE employee;\nLOAD DATA INPATH '/user/uti/demo/department.csv' INTO TABlE department;\nLOAD DATA INPATH '/user/uti/demo/salary.csv' INTO TABlE salary;\n</code></pre> Remarque <p>V\u00e9rifier sur HDFS l'emplacement, le type et le format des fichiers de donn\u00e9es relatifs \u00e0 ces tables.</p> <p> Insertion de donn\u00e9es</p> <pre><code>CREATE TABLE jours(num int, nom string);\nINSERT INTO jours VALUES(1, 'Lundi');\nINSERT INTO jours VALUES(2, 'Mardi');\nINSERT INTO jours VALUES(3, 'Mercredi');\n</code></pre> MapReduce <p>La commande d'insertion g\u00e9n\u00e8re un job MapReduce que vous pouvez consulter sur YARN.</p> <p> Mise \u00e0 jour et suppression</p> <p>Pour ex\u00e9cuter ces op\u00e9rations, quelques conditions doivent \u00eatre v\u00e9rifi\u00e9es :</p> <ol> <li>La table utilise le format ORC </li> <li>La table supporte le Bucketing</li> <li>Les transactions ACID sont activ\u00e9es sur Hive</li> </ol> <p>Essayer de mettre \u00e0 jour la table jours :</p> <p><pre><code>UPDATE jours set nom = upper(nom) WHERE num = 1;\n</code></pre> Une erreur est alors affich\u00e9e. Pour pouvoir ex\u00e9cuter ces requ\u00eates, nous commen\u00e7ons par activer les transactions sous Hive. Ceci est possible avec l'une des deux m\u00e9thodes :</p> <ol> <li>Modifier le fichier hive-site.xml en ajoutant les lignes suivante et puis red\u00e9marrer Hive :</li> </ol> <p><pre><code>&lt;property&gt;\n&lt;name&gt;hive.support.concurrency&lt;/name&gt;\n&lt;value&gt;true&lt;/value&gt;\n&lt;/property&gt;\n&lt;property&gt;\n&lt;name&gt;hive.txn.manager&lt;/name&gt;\n&lt;value&gt;org.apache.hadoop.hive.ql.lockmgr.DbTxnManager&lt;/value&gt;\n&lt;/property&gt;\n&lt;property&gt;\n&lt;name&gt;hive.enforce.bucketing&lt;/name&gt;\n&lt;value&gt;true&lt;/value&gt;\n&lt;/property&gt;\n&lt;property&gt;\n&lt;name&gt;hive.exec.dynamic.partition.mode&lt;/name&gt;\n&lt;value&gt;nostrict&lt;/value&gt;\n&lt;/property&gt;\n&lt;property&gt;\n&lt;name&gt;hive.compactor.initiator.on&lt;/name&gt;\n&lt;value&gt;true&lt;/value&gt;\n&lt;/property&gt;\n&lt;property&gt;\n&lt;name&gt;hive.compactor.worker.threads&lt;/name&gt;\n&lt;value&gt;1&lt;/value&gt;\n&lt;/property&gt;\n</code></pre> 2. \u00c0 partir du shell hive :</p> <pre><code>SET hive.support.concurrency=true;\nSET hive.txn.manager=org.apache.hadoop.hive.ql.lockmgr.DbTxnManager;\n# Pour Hive 2.0\nSET hive.enforce.bucketing=true;\nSET hive.exec.dynamic.partition.mode=nostrict;\n# Pour hive metastore\nSET hive.compactor.initiator.on=true;\nSET hive.compactor.worker.threads=1;\n</code></pre> <p>Ensuite cr\u00e9er une table supportant les transactions :</p> <pre><code>CREATE TABLE employee_trans (\nid int,\nname string,\nage int,\ngender string)\nclustered by (gender) into 2 buckets\nSTORED AS ORC\nTBLPROPERTIES ('transactional'='true');\n\n-- ins\u00e9rer des donn\u00e9es\nINSERT INTO employee_trans VALUES(1,'James',30,'M');\nINSERT INTO employee_trans VALUES(2,'Ann',40,'F');\nINSERT INTO employee_trans VALUES(3,'Jeff',41,'M');\nINSERT INTO employee_trans VALUES(4,'Jennifer',20,'F');\n\n-- Mise \u00e0 jour\nUPDATE employee_trans\nSET age=45\nWHERE id=3;\n\n-- Suppression\nDELETE FROM employee_trans\nWHERE id=4;\n\n-- V\u00e9rifier les donn\u00e9es\nSELECT * FROM employee_trans;\n</code></pre>"},{"location":"hive.html#select","title":"SELECT","text":"<p>Format de la requ\u00eate :</p> <pre><code>SELECT [ALL | DISTINCT] select_expr, select_expr, ...\nFROM table_reference\n[WHERE where_condition]\n[GROUP BY col_list]\n[HAVING having_condition]\n[ORDER BY col_list]\n[LIMIT [offset,] rows]\n</code></pre> <p>Reprenons les m\u00eames exemples de la section Pig.</p> <p> Filtrage pour avoir les employ\u00e9s (sans doublons) ayant re\u00e7u un salaire compris entre 5000 et 7000</p> <pre><code>SELECT distinct employee_id\nFROM salary\nWHERE payment &gt;= 5000 AND payment &lt;= 7000;\n</code></pre> <p> Nombre d'employ\u00e9s par d\u00e9partement et afficher les 3 plus grands d\u00e9partements</p> <pre><code>SELECT department_id, count(id) AS nb_emp\nFROM employee\nGROUP BY department_id\nORDER BY nb_emp DESC\nLIMIT 3;\n</code></pre> <p> Jointure : trouver le nom du d\u00e9partement de chaque employ\u00e9 (afficher les 4 premiers employ\u00e9s)</p> <pre><code>SELECT fname, lname, dept_name\nFROM employee JOIN department ON (employee.department_id = department.id) limit 4;\n</code></pre> <p> Requ\u00eate imbriqu\u00e9e : Trouver le nombre moyen d'employ\u00e9s par d\u00e9partement</p> <pre><code>SELECT AVG(nb_emp)\nFROM (SELECT department_id, count(id) AS nb_emp\nFROM employee\nGROUP BY department_id\n) q1;\n</code></pre>"},{"location":"hive.html#references_hiveql","title":"R\u00e9f\u00e9rences HiveQL","text":"<p>Pour une r\u00e9f\u00e9rence compl\u00e8te du langage Pi Latin, aller sur la page de documentation (ici)</p> <p>Voici aussi, un m\u00e9mo du langage :</p> <p>Ouvrir dans un nouvel onglet</p>"},{"location":"hive.html#exercices","title":"Exercices","text":""},{"location":"hive.html#exercice_1","title":"Exercice 1","text":"<p>Reprendre l'exercice de la section Pig en utilisant Hive.</p>"},{"location":"hive.html#exercice_2","title":"Exercice 2","text":"<p>Le fichier de donn\u00e9es utilis\u00e9 dans cet examen est CrimeData_200K.csv qui comporte 200 milles lignes de 5 colonnes. </p> <p>Un aper\u00e7u des 6 premi\u00e8re lignes est donn\u00e9 dans la figure ci-apr\u00e8s :</p> <pre><code>Dc_Dist,Dispatch_Date_Time,Text_General_Code,Lon,Lat\n25,2010-03-03 11:57:00,Fraud,-75.117665,40.019968\n15,2008-02-05 15:10:00,All Other Offenses,-75.083062,40.027315\n24,2015-03-17 22:17:00,Prostitution and Commercialized Vice,-75.113389,39.996459\n12,2010-07-11 23:19:00,All Other Offenses,-75.223246,39.937435\n2,2006-12-05 22:59:00,All Other Offenses,-75.102684,40.044051\n</code></pre> <p>Le fichier contient des informations sur des actes criminels d\u00e9crits par\u00a0:</p> Colonne Description Dc_Dist Num\u00e9ro de district Dispatch_Date_Time Date et heure de prise en charge de l\u2019incident Text_General_code Cat\u00e9gories du crime Lon Longitude Lat Latitude <p>Le d\u00e9partement de Police vous a recrut\u00e9 pour l\u2019aider \u00e0 pr\u00e9parer les donn\u00e9es pour cr\u00e9er des tableaux de bord.</p> <ol> <li>T\u00e9l\u00e9charger le fichier CSV depuis l\u2019URL\u00a0: https://tinyurl.com/crimesdataset puis cr\u00e9er une base de donn\u00e9es contenant une table avec Hive et charger les donn\u00e9es du fichier pr\u00e9c\u00e9dent dans cette m\u00eame table.</li> <li>Donner les requ\u00eates Hive pour r\u00e9pondre aux questions suivantes\u00a0:<ol> <li>Combien y-a-t-il de districts\u00a0?</li> <li>Donner le pourcentage de crimes par district.</li> <li>Quels sont les 3 mois avec le plus grand nombre d\u2019incidents enregistr\u00e9s. (La fonction month permet d\u2019extraire le mois de la date)</li> </ol> </li> </ol>"},{"location":"mr.html","title":"MapReduce avec Python","text":""},{"location":"mr.html#mapreduce_avec_python","title":"MapReduce avec Python","text":""},{"location":"mr.html#demarragearret_du_service","title":"D\u00e9marrage/Arr\u00eat du service","text":"Service YARN D\u00e9marrageArr\u00eat <pre><code>sudo service hadoop-yarn-resourcemanager start\nsudo service hadoop-yarn-nodemanager start\n</code></pre> <pre><code>sudo service hadoop-yarn-resourcemanager stop\nsudo service hadoop-yarn-nodemanager stop\n</code></pre> <p>La commande <code>jps</code> permet de v\u00e9rifier que deux processus sont lanc\u00e9s : ResourceManager et NodeManager.</p> <p>L'interface du Resource Manager est accessible depuis : http://localhost:8088  Cette interface permet de v\u00e9rifier l'\u00e9tat des ressources RAM et CPU du cluster, les applications (d\u00e9marr\u00e9es, termin\u00e9es, en cours ...) et les noeuds du cluster.</p> <p></p>"},{"location":"mr.html#verification_des_processus_serveur","title":"V\u00e9rification des processus serveur","text":"<p>Pour voir les diff\u00e9rents processus serveurs, ex\u00e9cuter la commande <code>jps</code>. Le r\u00e9sultat est :</p> <p></p> <p>Processus HDFS : NameNode, DataNode, JournalNode Processus YARN : ResourceManager, NodeManager, JobHistoryServer, ApplicationHistoryServer</p>"},{"location":"mr.html#preparer_lenvironnement","title":"Pr\u00e9parer l'environnement","text":"<p>Pour les exemples et les exercices de cette section, vous avez besoin de Python, Jupyter et MRJOB.</p> <p> Installer les paquets et modules suivants :</p> <p>Cette \u00e9tape est \u00e0 ignorer si vous utilisez la machine virtuelle fournie.</p> <pre><code>$ sudo apt-get install python python3-pip\n$ sudo pip3 install mrjob\n$ sudo pip3 install jupyter\n</code></pre> <p> Lancer Jupyter Notebook</p> <pre><code>$ cd dossier_travail\n$ jupyter notebook --no-browser --ip=0.0.0.0 --NotebookApp.token=''\n</code></pre> <p>Pour acc\u00e9der depuis la machine h\u00f4te aller \u00e0 l'adresse : http://localhost:8888 </p> <p>Les exemples peuvent \u00eatre \u00e9crit avec un simple \u00e9diteur comme geany, nano, vi (ou encore notepad sous windows). Et les commandes peuvent \u00eatre lanc\u00e9es \u00e0 partir du shell.</p>"},{"location":"mr.html#premier_exemple_word_count","title":"Premier Exemple : Word Count","text":"<p>L'exemple classique pour illustrer le fonctionnement de MapReduce est celui de compter le nombre d'occurences d'un mot dans un fichier texte (le fichier shakespeare.txt .)</p>"},{"location":"mr.html#preparer_les_donnees","title":"Pr\u00e9parer les donn\u00e9es","text":"<ul> <li>T\u00e9l\u00e9charger le fichier shakespeare.txt  sur la machine virtuelle Hadoop.</li> <li>Mettre le fichier dans le syst\u00e8me HDFS </li> </ul> <pre><code>$ hadoop fs -put shakespeare.txt\n</code></pre>"},{"location":"mr.html#mapper_et_reducer","title":"Mapper et Reducer","text":"<p>L'objectif est de d\u00e9terminer le nombre d'occurences de chaque mot du fichier. Chaque ligne est compos\u00e9e de plusieurs mots (Le s\u00e9parateur est ' ').</p> <p>La transformation \u00e0 effectuer par chaque Mapper est de d\u00e9composer chaque ligne re\u00e7ue en mots est lui associer la valeur 1.</p> <p>Apr\u00e8s la phase de tri et de redistribution (sort and shuffle), chaque Reducer va recevoir des mots et une liste de '1' pour chaque occurence. Pour calculer le nombre d'occurences total, il suffit de faire la somme de ces '1'.</p> <p></p>"},{"location":"mr.html#programmation_avec_mrjob","title":"Programmation avec MRJob","text":"<p>MapReduce est \u00e9crit en Java mais accepte les autres langages de programmation via la technique de streaming via op\u00e9ration de lecture \u00e9criture sur les flux d'entr\u00e9e-sortie standard (print, read).</p> <p>La biblioth\u00e8que <code>mrjob</code> simplifie l'\u00e9criture de programmes MapReduce.</p> <p>Dans cet exemple, deux classes de la librairie mrjob sont utilis\u00e9es : MRJob et MRStep.</p> <ul> <li>Pour cr\u00e9er un Job MapReduce, il suffit de cr\u00e9er une classe qui h\u00e9rite de MRJob (ici la classe WordCount).</li> <li>Cr\u00e9er une fonction qui effectue la transformation du Mapper : la m\u00e9thode <code>mapper_get_words</code>. Cette m\u00e9thode re\u00e7oit 3 param\u00e8tres self comme toutes les m\u00e9thodes d'une classe, le deuxi\u00e8me est ignor\u00e9 pour ce mapper et le dernier c'est une ligne du fichier de donn\u00e9es. La fonction split d\u00e9compose la ligne en une liste de mots.</li> <li>Cr\u00e9er une fonction qui r\u00e9alise l'agr\u00e9gation du Reducer : la m\u00e9thode <code>reducer_count_words</code>. Elle re\u00e7oit le param\u00e8tre self, la cl\u00e9 utilis\u00e9e par le Mapper (donc un mot) et la liste des valeurs r\u00e9cupr\u00e9es des diff\u00e9rents mappers (les '1'). L'agr\u00e9gation effectu\u00e9e est une somme par la fonction sum.</li> <li>D\u00e9finier les \u00e9tapes ou les diff\u00e9rentes t\u00e2che \u00e0 effectuer dans une m\u00e9thode appel\u00e9e <code>steps</code> qui doit retouner une liste de MRStep. Pour chaque instance MRStep cr\u00e9\u00e9e, on sp\u00e9cifie le nom de la fonction mapper et reducer d\u00e9j\u00e0 d\u00e9finie. Dans cet exemple, il y a une seule phase MapReduce.  </li> <li>Enfin l'appel de la m\u00e9thode <code>run</code> pour d\u00e9clencher L'ex\u00e9cution du Job MapReduce.</li> </ul> <p>Dans ce qui suit le contenu du Notebook Jupyter avec le code \u00e0 tester.</p> Streaming jar <p>En cas d'erreur <code>No hadoop streaming jar</code>, donner le chemin vers ce jar avec la commande :</p> <p><code>! python wordcount.py -r hadoop --hadoop-streaming-jar C:\\hadoop-env\\hadoop-3.2.1\\share\\hadoop\\tools\\lib\\hadoop-streaming-3.2.1.jar hdfs:///user/uti/shakespeare.txt</code></p>"},{"location":"mr.html#surveiller_les_jobs","title":"Surveiller les jobs","text":"<p>Pour afficher les jobs MapReduce de la session en cours, visiter la page http://localhost:8088</p> <p>Quand le programme MapReduce de l'exercice pr\u00e9c\u00e9dent est termin\u00e9, il est indiqu\u00e9 dans la capture suivante :</p> <p></p> <p>Pour afficher l'historique complet c'est \u00e0 partir d'ici : http://localhost:8081</p> <p>Il est aussi possible d'utiliser les commandes <code>yarn</code> : - Pour afficher toutes les applications :  <pre><code>yarn application -list -appStates ALL\n</code></pre> - Pour arr\u00eater une application :  <pre><code>yarn application -kill &lt;id&gt;\n</code></pre></p>"},{"location":"mr.html#exercices","title":"Exercices","text":""},{"location":"mr.html#exercice_1","title":"Exercice 1","text":"<p>Transformer l'exemple WordCount afin d'obtenir le r\u00e9sultat tri\u00e9 dans l'ordre d\u00e9croissant du nombre d'occurrences. (Hint : exploiter la phase sort and shuffle qui trie la cl\u00e9 selon l'ordre alphab\u00e9tique).</p>"},{"location":"mr.html#exercice_2","title":"Exercice 2","text":"<p>Sur les donn\u00e9es de la production p\u00e9troli\u00e8re de la section pr\u00e9c\u00e9dente et en utilisant MapReduce :</p> <ul> <li>Calculer la production annuelle de chaque champ.</li> <li>Trouver le champ avec la plus grande production par mois.</li> </ul>"},{"location":"mr.html#exercice_3","title":"Exercice 3","text":"<p>On souhaite afficher pour les utilisateurs d\u2019un r\u00e9seau social le nombre d\u2019amis en commun avec un autre utilisateur quand il visite la page de ce dernier. </p> <p>\u00c9crire un programme Map Reduce qui calcule le nombre d\u2019amis en communs pour chaque paire d\u2019utilisateurs sachant qu\u2019on dispose d\u2019un fichier contenant les identifiants des utilisateurs suivis des identifiants de leurs amis.</p> <p>Le format de chaque ligne de ce fichier est\u00a0:</p> <pre><code>Id_utilisateur\u00a0: id_ami1, id_ami2, \u2026.\nExemple\u00a0: (r\u00e9seau social contenant 5 utilisateurs)\n10:20,30,40\n20:10,30,40\n30:10,20,40,50\n40:10,20,30,50\n50:30,40\n</code></pre> <p> Id\u00e9e :</p> <p>L\u2019id\u00e9e consiste \u00e0\u00a0:</p> <ol> <li>G\u00e9n\u00e9rer les couples d\u2019amis \u00e0 partir de chaque ligne (dans l\u2019ordre croissant des cl\u00e9s couple 10-30 au lieu du couple 30-10 par exemple)\u00a0: La ligne \u00ab\u00a010:20,30,40\u00a0\u00bb g\u00e9n\u00e8re ainsi\u00a0: 10-20:20,30,40 10-30:20,30,40 10-40:20,30,40</li> <li>Regrouper les couples (m\u00eame couleur)\u00a0puis garder les \u00e9l\u00e9ments communs des 2 listes (remarquer que chaque couple appara\u00eet exactement 2 fois). 10-20:20,30,40 10-20:10,30,40 10-20:30,40 </li> </ol>"},{"location":"mr.html#exercice_4","title":"Exercice 4","text":"<p>En s'inspirant de l'exemple MapReduce et source json (books.json ) ci-apr\u00e8s qui affiche les titres des livres ayant 700 pages, \u00e9crire un programme MapReduce qui calcule le nombre de livres pour chaque auteur.     <pre><code>from mrjob.step import MRStep\nfrom mrjob.job import MRJob\nfrom mrjob.protocol import JSONValueProtocol\n\nclass Exemple(MRJob):\n    INPUT_PROTOCOL = JSONValueProtocol\n    def steps(self):\n        return [MRStep(mapper=self.fmap, reducer=self.freduce)]\n\n    def fmap(self, _, book):\n        if book['pageCount']&gt;700:\n            yield None,(book['title'], book['pageCount'])\n    def freduce(self, _ ,v):\n        for l in v:\n            yield l[0], l[1]\nif __name__ == '__main__':\n    Exemple.run()\n</code></pre></p>"},{"location":"pig.html","title":"Pig","text":""},{"location":"pig.html#pig","title":"Pig","text":""},{"location":"pig.html#premier_exemple_wordcount","title":"Premier exemple : Wordcount","text":"<p>Nous reprenons l'exemple de comptage de mots utilis\u00e9 dans l'atelier MapReduce pour le r\u00e9soudre avec le langage Pig Latin.</p> Structure d'un script Pig <p>Un script Pig comporte 3 phases :</p> <pre><code>1. Le chargement des donn\u00e9es avec LOAD\n2. Une s\u00e9rie de transformations\n3. L'affichage ou la sauvegarde des r\u00e9sultats\n</code></pre> <p> Lancer la machine virtuelle et acc\u00e9der \u00e0 Pig en mode interactif \u00e0 partir du terminal</p> <p><pre><code>pig -x mapreduce\n</code></pre> Vous serez alors redirig\u00e9 vers le shell grunt :</p> <pre><code>grunt&gt;\n</code></pre> <p> Charger le fichier <code>shakespeare.txt</code></p> <p><pre><code>lines = LOAD './shakespeare.txt' AS (line: chararray);\n</code></pre> Ce qui charge le contenu du fichier \u00e0 partir de HDFS sous la forme de bag de chararray dans la variable lines.</p> <p> D\u00e9composer chaque ligne en mots</p> <p><pre><code>words = FOREACH lines GENERATE FLATTEN(TOKENIZE(line)) AS word;\n</code></pre> TOKENIZE : D\u00e9couper la ligne en bag de mots FLATTEN : Transformer le bag en des mots individuels</p> <p> Cr\u00e9er un groupe pour chaque mot</p> <pre><code>word_groups = GROUP words BY word;\n</code></pre> <p> Compter les \u00e9l\u00e9ments de chaque groupe</p> <pre><code>word_count = FOREACH word_groups GENERATE COUNT(words) AS count, group;\n</code></pre> <p> Trier par le nombre d'occurences</p> <p><pre><code>ordered_word_count = ORDER word_count BY count DESC;\n</code></pre>  Sauvegarder sur HDFS</p> <p><pre><code>STORE ordered_word_count INTO './word_count_result';\n</code></pre> Apr\u00e8s l'envoi de cette instruction, Pig cr\u00e9e un job MapReduce. V\u00e9rifier la progression sur http://localhost:8088</p> <p></p> <p>Un dossier <code>word_count_result</code> est cr\u00e9\u00e9 o\u00f9 des fichiers part-r-???? contiennent les nombres d'occurences associ\u00e9s aux mots du fichier.</p> <p> Afficher le r\u00e9sultat</p> <pre><code>hadoop fs -cat word_count_result/part-r-* | more\n</code></pre> <p>Vous pouvez aussi utiliser l'interface web de HDFS pour afficher le r\u00e9sultat dans le dossier 'word_count_result'</p>"},{"location":"pig.html#execution_dun_script","title":"Ex\u00e9cution d'un script","text":"<p>Pour ex\u00e9cuter l'exemple pr\u00e9c\u00e9dent :</p> <p> Cr\u00e9er un fichier <code>wordcount.pig</code> avec un \u00e9diteur de texte (geany) avec le code suivant :</p> <p><pre><code>lines = LOAD './shakespeare.txt' AS (line: chararray);\nwords = FOREACH lines GENERATE FLATTEN(TOKENIZE(line)) AS word;\nword_groups = GROUP words BY word;\nword_count = FOREACH word_groups GENERATE COUNT(words) AS count, group;\nordered_word_count = ORDER word_count BY count DESC;\nSTORE ordered_word_count INTO './word_count_result';\n</code></pre>  Ex\u00e9cuter le script avec la commande suivante</p> <pre><code>pig -x mapreduce wordcount.pig\n</code></pre> Mode local <p>Avant de lancer un script pig, il est recommand\u00e9 de le tester en local. Ceci est possible avec la commande suivante : <pre><code>pig -x local wordcount.pig\n</code></pre></p> <p>Attention : dans ce mode d'ex\u00e9cution les chemins sont interpr\u00e9t\u00e9s dans le syst\u00e8me local et non HDFS.</p>"},{"location":"pig.html#instructions_pig_par_lexemple","title":"Instructions Pig par l'exemple","text":"Pr\u00e9parer les donn\u00e9es <ol> <li>Cr\u00e9er un dossier demo : <code>mkdir ~/demo</code></li> <li>T\u00e9l\u00e9charger les fichiers csv dans /home/uti/demo :<ul> <li>employee.csv </li> <li>department.csv </li> <li>salary.csv </li> </ul> </li> <li>Envoyer les donn\u00e9es sur HDFS <pre><code>hadoop fs -put /home/uti/demo\n</code></pre></li> </ol> <p> Charger des donn\u00e9es sans sch\u00e9ma \u00e0 partir d'un fichier CSV avec ',' comme s\u00e9parateur. Puis limiter le nombre de tuples \u00e0 10</p> <pre><code>e1 = LOAD '/user/uti/demo/employee.csv' USING PigStorage (',');\ne1_sample = limit e1 10;\ndump e1_sample;\n</code></pre> <p> Charger avec un sch\u00e9ma</p> <pre><code>emp = LOAD '/user/uti/demo/employee.csv' USING PigStorage (',') as (eid:chararray,fname:chararray,lname:chararray,department:chararray);\nemp_sample = limit emp 10;\ndump emp_sample;\n</code></pre> <p> Projection</p> <pre><code>emp = LOAD '/user/uti/demo/employee.csv' USING PigStorage (',') as (eid:chararray,fname:chararray,lname:chararray,department:chararray);\nemp_proj = FOREACH emp GENERATE $1, lname;\nemp_sample = limit emp_proj 10;\ndump emp_sample;\n</code></pre> <p> Filtrage pour avoir les employ\u00e9s (sans doublons) ayant re\u00e7u un salaire compris entre 5000 et 7000</p> <pre><code>sal = LOAD '/user/uti/demo/salary.csv' USING PigStorage (',') as (salary_id:chararray,employ_id:chararray,payment:double,p_date:datetime);\nabove_5k_7k = DISTINCT (FILTER sal BY payment &gt;= 5000 AND payment &lt;= 7000);\nemp_sample = limit above_5k_7k 10;\ndump emp_sample;\n</code></pre> <p> Nombre d'employ\u00e9s par d\u00e9partement et afficher les 3 plus grands d\u00e9partements</p> <pre><code>emp = LOAD '/user/uti/demo/employee.csv' USING PigStorage (',') as (eid:chararray,fname:chararray,lname:chararray,department:chararray);\nemp_group_dep = group emp by department;\n-- ou emp_group_dep = group emp by $3;\ngroup_count = FOREACH emp_group_dep GENERATE group AS dep, COUNT(emp.eid) AS nb_emp;\nnbemp_dep = ORDER group_count BY nb_emp DESC;\ntop_dep = limit nbemp_dep 3;\ndump top_dep;\n</code></pre> <p> Jointure : trouver le nom du d\u00e9partement de chaque employ\u00e9</p> <pre><code>emp = LOAD '/user/uti/demo/employee.csv' USING PigStorage (',') as (emp_id:chararray,fname:chararray,lname:chararray,dept_id:chararray);\n\ndep = LOAD '/user/uti/demo/department.csv' USING PigStorage (',') as (dept_id:chararray,dept_name:chararray);\n\ndep_emp = LIMIT (FOREACH (JOIN emp by (dept_id), dep by (dept_id)) GENERATE fname, lname, dept_name) 3;\nDUMP dep_emp;\n</code></pre>"},{"location":"pig.html#test_et_performances","title":"Test et performances","text":"<p>DESCRIBE</p> <p>Elle permet d'afficher le sch\u00e9ma d'une relation.</p> <p>Exemple</p> <p><pre><code>grunt&gt; lines = LOAD './shakespeare.txt' AS (line: chararray);\ngrunt&gt; words = FOREACH lines GENERATE FLATTEN(TOKENIZE(line)) AS word;\ngrunt&gt; word_groups = GROUP words BY word;\ngrunt&gt; word_count = FOREACH word_groups GENERATE COUNT(words) AS count, group;\ngrunt&gt; DESCRIBE lines;\nlines: {line: chararray}\ngrunt&gt; DECRIBE word_groups;\nword_groups: {group: chararray,words: {word: chararray}}\ngrunt&gt; DESCRIBEvword_count;\nword_count: {count: long,group: chararray}\n</code></pre> ILLUSTRATE</p> <p>Cette commande Pig permet de montrer les diff\u00e9rentes transformations effectu\u00e9es sur les donn\u00e9es.</p> <pre><code>ILLUSTRATE relation|-script &lt;nom_script&gt;\n</code></pre> <p>Exemple : (source http://pig.apache.org)</p> <p><pre><code>grunt&gt; cat visits.txt\nAmy     yahoo.com       19990421\nFred    harvard.edu     19991104\nAmy     cnn.com 20070218\nFrank   nba.com 20070305\nFred    berkeley.edu    20071204\nFred    stanford.edu    20071206\n\ngrunt&gt; cat visits.pig\nvisits = LOAD 'visits.txt' AS (user, url, timestamp);\nrecent_visits = FILTER visits BY timestamp &gt;= '20071201';\nhistorical_visits = FILTER visits BY timestamp &lt;= '20000101';\nDUMP recent_visits;\nDUMP historical_visits;\nSTORE recent_visits INTO 'recent';\nSTORE historical_visits INTO 'historical';\n\ngrunt&gt; exec visits.pig\n\n(Fred,berkeley.edu,20071204)\n(Fred,stanford.edu,20071206)\n\n(Amy,yahoo.com,19990421)\n(Fred,harvard.edu,19991104)\n\n\ngrunt&gt; illustrate -script visits.pig\n\n------------------------------------------------------------------------\n| visits     | user: bytearray | url: bytearray | timestamp: bytearray |\n------------------------------------------------------------------------\n|            | Amy             | yahoo.com      | 19990421             |\n|            | Fred            | stanford.edu   | 20071206             |\n------------------------------------------------------------------------\n-------------------------------------------------------------------------------\n| recent_visits     | user: bytearray | url: bytearray | timestamp: bytearray |\n-------------------------------------------------------------------------------\n|                   | Fred            | stanford.edu   | 20071206             |\n-------------------------------------------------------------------------------\n---------------------------------------------------------------------------------------\n| Store : recent_visits     | user: bytearray | url: bytearray | timestamp: bytearray |\n---------------------------------------------------------------------------------------\n|                           | Fred            | stanford.edu   | 20071206             |\n---------------------------------------------------------------------------------------\n-----------------------------------------------------------------------------------\n| historical_visits     | user: bytearray | url: bytearray | timestamp: bytearray |\n-----------------------------------------------------------------------------------\n|                       | Amy             | yahoo.com      | 19990421             |\n-----------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------------\n| Store : historical_visits     | user: bytearray | url: bytearray | timestamp: bytearray |\n-------------------------------------------------------------------------------------------\n|                               | Amy             | yahoo.com      | 19990421             |\n-------------------------------------------------------------------------------------------\n</code></pre> EXPLAIN</p> <p>Affiche les plans d'ex\u00e9cution logique, physique et les phases MapReduce.</p> <pre><code>EXPLAIN relation|-script &lt;nom_script&gt; [-out chemin] [-dot|-xml]\n</code></pre> <p>Exemple</p> <pre><code>grunt&gt; EXPLAIN -script wordcount.pig -out explain_wordcount.txt\n</code></pre> <p>Le fichier <code>explain_wordcount.txt</code> obtenu contient :</p> <pre><code>#-----------------------------------------------\n# New Logical Plan:\n#-----------------------------------------------\nordered_word_count: (Name: LOStore Schema: count#112:long,group#109:chararray)\n|\n|---ordered_word_count: (Name: LOSort Schema: count#112:long,group#109:chararray)\n|   |\n|   count:(Name: Project Type: long Uid: 112 Input: 0 Column: 0)\n|\n|---word_count: (Name: LOForEach Schema: count#112:long,group#109:chararray)\n|   |\n|   (Name: LOGenerate[false,false] Schema: count#112:long,group#109:chararray)ColumnPrune:OutputUids=[112, 109]ColumnPrune:InputUids=[109, 110]\n|   |   |\n|   |   (Name: UserFunc(org.apache.pig.builtin.COUNT) Type: long Uid: 112)\n|   |   |\n|   |   |---words:(Name: Project Type: bag Uid: 110 Input: 0 Column: (*))\n|   |   |\n|   |   group:(Name: Project Type: chararray Uid: 109 Input: 1 Column: (*))\n|   |\n|   |---words: (Name: LOInnerLoad[1] Schema: word#109:chararray)\n|   |\n|   |---(Name: LOInnerLoad[0] Schema: group#109:chararray)\n|\n|---word_groups: (Name: LOCogroup Schema: group#109:chararray,words#110:bag{#114:tuple(word#109:chararray)})\n|   |\n|   word:(Name: Project Type: chararray Uid: 109 Input: 0 Column: 0)\n|\n|---words: (Name: LOForEach Schema: word#118:chararray)\n|   |\n|   (Name: LOGenerate[true] Schema: word#118:chararray)\n|   |   |\n|   |   (Name: UserFunc(org.apache.pig.builtin.TOKENIZE) Type: bag Uid: 116)\n|   |   |\n|   |   |---(Name: Cast Type: chararray Uid: 98)\n|   |       |\n|   |       |---line:(Name: Project Type: bytearray Uid: 98 Input: 0 Column: (*))\n|   |\n|   |---(Name: LOInnerLoad[0] Schema: line#98:bytearray)\n|\n|---lines: (Name: LOLoad Schema: line#98:bytearray)RequiredFields:null\n#-----------------------------------------------\n# Physical Plan:\n#-----------------------------------------------\nordered_word_count: Store(hdfs://master.cluster.virt:8020/user/uti/word_count_result:org.apache.pig.builtin.PigStorage) - scope-18\n|\n|---ordered_word_count: POSort[bag]() - scope-17\n    |   |\n|   Project[long][0] - scope-16\n    |\n|---word_count: New For Each(false,false)[bag] - scope-15\n        |   |\n|   POUserFunc(org.apache.pig.builtin.COUNT)[long] - scope-11\n        |   |\n|   |---Project[bag][1] - scope-10\n        |   |\n|   Project[chararray][0] - scope-13\n        |\n|---word_groups: Package(Packager)[tuple]{chararray} - scope-7\n            |\n|---word_groups: Global Rearrange[tuple] - scope-6\n                |\n|---word_groups: Local Rearrange[tuple]{chararray}(false) - scope-8\n                    |   |\n|   Project[chararray][0] - scope-9\n                    |\n|---words: New For Each(true)[bag] - scope-5\n                        |   |\n|   POUserFunc(org.apache.pig.builtin.TOKENIZE)[bag] - scope-3\n                        |   |\n|   |---Cast[chararray] - scope-2\n                        |       |\n|       |---Project[bytearray][0] - scope-1\n                        |\n|---lines: Load(hdfs://master.cluster.virt:8020/user/uti/shakespeare.txt:org.apache.pig.builtin.PigStorage) - scope-0\n\n#--------------------------------------------------\n# Map Reduce Plan                                  \n#--------------------------------------------------\nMapReduce node scope-19\nMap Plan\nword_groups: Local Rearrange[tuple]{chararray}(false) - scope-53\n|   |\n|   Project[chararray][0] - scope-55\n|\n|---word_count: New For Each(false,false)[bag] - scope-42\n    |   |\n|   Project[chararray][0] - scope-43\n    |   |\n|   POUserFunc(org.apache.pig.builtin.COUNT$Initial)[tuple] - scope-44\n    |   |\n|   |---Project[bag][1] - scope-45\n    |\n|---Pre Combiner Local Rearrange[tuple]{Unknown} - scope-56\n        |\n|---words: New For Each(true)[bag] - scope-5\n            |   |\n|   POUserFunc(org.apache.pig.builtin.TOKENIZE)[bag] - scope-3\n            |   |\n|   |---Cast[chararray] - scope-2\n            |       |\n|       |---Project[bytearray][0] - scope-1\n            |\n|---lines: Load(hdfs://master.cluster.virt:8020/user/uti/shakespeare.txt:org.apache.pig.builtin.PigStorage) - scope-0--------\nCombine Plan\nword_groups: Local Rearrange[tuple]{chararray}(false) - scope-57\n|   |\n|   Project[chararray][0] - scope-59\n|\n|---word_count: New For Each(false,false)[bag] - scope-46\n    |   |\n|   Project[chararray][0] - scope-47\n    |   |\n|   POUserFunc(org.apache.pig.builtin.COUNT$Intermediate)[tuple] - scope-48\n    |   |\n|   |---Project[bag][1] - scope-49\n    |\n|---word_groups: Package(CombinerPackager)[tuple]{chararray} - scope-52--------\nReduce Plan\nStore(hdfs://master.cluster.virt:8020/tmp/temp-483208883/tmp-1292167423:org.apache.pig.impl.io.InterStorage) - scope-20\n|\n|---word_count: New For Each(false,false)[bag] - scope-15\n    |   |\n|   POUserFunc(org.apache.pig.builtin.COUNT$Final)[long] - scope-11\n    |   |\n|   |---Project[bag][1] - scope-50\n    |   |\n|   Project[chararray][0] - scope-13\n    |\n|---word_groups: Package(CombinerPackager)[tuple]{chararray} - scope-7--------\nGlobal sort: false\n----------------\n\nMapReduce node scope-22\nMap Plan\nordered_word_count: Local Rearrange[tuple]{tuple}(false) - scope-26\n|   |\n|   Constant(all) - scope-25\n|\n|---New For Each(false)[tuple] - scope-24\n    |   |\n|   Project[long][0] - scope-23\n    |\n|---Load(hdfs://master.cluster.virt:8020/tmp/temp-483208883/tmp-1292167423:org.apache.pig.impl.builtin.RandomSampleLoader('org.apache.pig.impl.io.InterStorage','100')) - scope-21--------\nReduce Plan\nStore(hdfs://master.cluster.virt:8020/tmp/temp-483208883/tmp569443691:org.apache.pig.impl.io.InterStorage) - scope-35\n|\n|---New For Each(false)[tuple] - scope-34\n    |   |\n|   POUserFunc(org.apache.pig.impl.builtin.FindQuantiles)[tuple] - scope-33\n    |   |\n|   |---Project[tuple][*] - scope-32\n    |\n|---New For Each(false,false)[tuple] - scope-31\n        |   |\n|   Constant(-1) - scope-30\n        |   |\n|   Project[bag][1] - scope-28\n        |\n|---Package(Packager)[tuple]{chararray} - scope-27--------\nGlobal sort: false\nSecondary sort: true\n----------------\n\nMapReduce node scope-37\nMap Plan\nordered_word_count: Local Rearrange[tuple]{long}(false) - scope-38\n|   |\n|   Project[long][0] - scope-16\n|\n|---Load(hdfs://master.cluster.virt:8020/tmp/temp-483208883/tmp-1292167423:org.apache.pig.impl.io.InterStorage) - scope-36--------\nReduce Plan\nordered_word_count: Store(hdfs://master.cluster.virt:8020/user/uti/word_count_result:org.apache.pig.builtin.PigStorage) - scope-18\n|\n|---New For Each(true)[tuple] - scope-41\n    |   |\n|   Project[bag][1] - scope-40\n    |\n|---Package(LitePackager)[tuple]{long} - scope-39--------\nGlobal sort: true\nQuantile file: hdfs://master.cluster.virt:8020/tmp/temp-483208883/tmp569443691\n----------------\n</code></pre> <p>Pour avoir un graphe d'ex\u00e9cution :</p> <pre><code>grunt&gt; EXPLAIN -script wordcount.pig -out explain_wordcount.dot -dot\n</code></pre> <p>Puis convertir le fichier .dot en png :</p> <pre><code>apt install graphviz -y\ndot -Tpng -out explain_wordcount.png explain_wordcount.dot\n</code></pre> <p>Ce qui donne :</p> <p></p>"},{"location":"pig.html#references_pig_latin","title":"R\u00e9f\u00e9rences Pig Latin","text":"<p>Pour une r\u00e9f\u00e9rence compl\u00e8te du langage Pig Latin, aller sur la page de documentation (ici)</p> <p>Voici aussi, un m\u00e9mo du langage :</p> <p>Ouvrir dans un nouvel onglet</p>"},{"location":"pig.html#exercice","title":"Exercice","text":""},{"location":"pig.html#datasets","title":"Datasets","text":"<p>Ci-apr\u00e8s la description des donn\u00e9es sur les cr\u00e9dits offerts par une banque \u00e0 ses clients. (source : https://www.kaggle.com ) Le fichier credit_risk_dataset.csv  est structur\u00e9 ainsi :</p> <pre><code>person_age :                \u00e2ge du client\nperson_income :             revenu annuel du client\nperson_home_ownership :     propri\u00e9t\u00e9 de la maison : OWN, RENT, MORTGAGE\nperson_emp_length :         dur\u00e9e en mois du cr\u00e9dit\nloan_intent :               motif du cr\u00e9dit (MEDICAL, EDUCATION, PERSONAL, ...)\nloan_grade :                A, B, C, D\nloan_amnt :                 montant du cr\u00e9dit\nloan_int_rate :             taux d'int\u00e9r\u00eat\nloan_status :               \u00e9tat du cr\u00e9dit (1: non rembours\u00e9, 0: rembours\u00e9)\nloan_percent_income :       pourcentage du montant du cr\u00e9dit par rapport au revenu\ncb_person_default_on_file : Y/N\ncb_person_cred_hist_length :historique (nombre de cr\u00e9dits)\n</code></pre>"},{"location":"pig.html#travail_a_faire","title":"Travail \u00e0 faire","text":"<p>R\u00e9pondre aux questions suivantes avec Pig.</p> <ol> <li>Calculer le montant total et la dur\u00e9e moyenne des cr\u00e9dits non rembours\u00e9s.</li> <li>Calculer le pourcentage des cr\u00e9dits rembours\u00e9s et non rembours\u00e9s.</li> <li>Quelle est la distribution des diff\u00e9rents \u00e9tats de propri\u00e9t\u00e9 de la maison.</li> <li>Quels sont les 3 motifs de cr\u00e9dits les plus demand\u00e9s.</li> <li>Calculer le pourcentage des cr\u00e9dits rembours\u00e9s et non rembours\u00e9s par motif puis par grade. </li> </ol>"},{"location":"ucase.html","title":"Cas Pratique : Data Pipeline avec Pig et Hive","text":""},{"location":"ucase.html#introduction","title":"Introduction","text":"<p>Les donn\u00e9es Clickstream constitue l'ensembles des informations qu'un utilisateur laisse lors de la visite d'un site web.</p> <p>Ces donn\u00e9es sont captur\u00e9es g\u00e9n\u00e9ralement par le serveur web et enregistr\u00e9es dans des fichiers semi-structur\u00e9s appel\u00e9s logs.</p> <p>Ces logs contiennent des informations comme l'adresse IP, le navigateur web, la date, le syst\u00e8me d'exploitation, etc.</p> <p>Le travail consiste \u00e0 automatiser les t\u00e2che d'ingestion, de nettoyage, de transformation des donn\u00e9es pour g\u00e9n\u00e9rer des donn\u00e9es exploitables dans la phase d'analyse.</p>"},{"location":"ucase.html#sources_de_donnees_et_pipeline","title":"Sources de donn\u00e9es et Pipeline","text":"<p>Le pipeline souhait\u00e9 est repr\u00e9sent\u00e9 par la figure suivante :</p> <p></p> <p>Les fichiers sources sont regroup\u00e9s dans cette archive  :</p> <ol> <li>products.tsv : Format TSV avec ent\u00eate et 2 colonnes (url, category)</li> <li>users.tsv : Format TSV avec ent\u00eate et 3 colonnes (SWID, BIRTH_DT, GENDER_CD)</li> <li>log.tsv : Format TSV sans ent\u00eate et 179 colonnes</li> </ol> load_files.pig <p>T\u00e9l\u00e9charger le script load_files.pig  qui permet de parser ces fichiers.</p>"},{"location":"ucase.html#travail_demande","title":"Travail demand\u00e9","text":"<ol> <li>Ajouter les transformations n\u00e9cessaires avec Pig pour obtenir la structure suivante : (user_id, age, gender, country, state, city, logdate, ip, product_category, url)</li> <li>R\u00e9pondre aux questions (avec Hive) :<ul> <li>Le top 5 des produits visit\u00e9s par coordonn\u00e9es g\u00e9ographiques de l'utilisateur.</li> <li>Le nombre de sessions par coordonn\u00e9es g\u00e9ographiques.</li> <li>Le nombre de sessions par genre, produit et coordonn\u00e9es g\u00e9ographiques.</li> </ul> </li> </ol>"}]}